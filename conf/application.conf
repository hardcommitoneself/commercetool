# This is the main configuration file for the application.
# https://github.com/typesafehub/config
# ~~~~~


# PRODUCTS
# ~~~~~

# Product attribute list that is displayed for a specific product variant (this does not allow to select different
# product variants, please check soft/hard selectable attributes for that purpose). Enter a list of the attribute keys.
productAttributes.displayedAttributes = ["colorFreeDefinition", "designer"]
productAttributes.displayedAttributes = ${?DISPLAYED_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that require re-loading the page to display the selected variant,
# e.g. if you select a different color you may want to show different pictures, description, etc.
# Enter a list of the attribute names.
productAttributes.primarySelectableAttributes = ["color"]
productAttributes.primarySelectableAttributes = ${?PRIMARY_SELECTABLE_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that DO NOT require re-loading the page to display the selected variant, e.g. size.
# Enter a list of the attribute names.
productAttributes.secondarySelectableAttributes = ["size"]
productAttributes.secondarySelectableAttributes = ${?SECONDARY_SELECTABLE_ATTRIBUTES}


# CATEGORIES
# ~~~~~

# The sales category in your project. Enter the category external ID.
common.saleCategoryExternalId = "6"
common.saleCategoryExternalId = ${?SALES_CATEGORY}

# The category containing the new products in your project. Enter the category external ID.
common.newCategoryExternalId = "1"
common.newCategoryExternalId = ${?NEW_CATEGORY}


# SUGGESTIONS
# ~~~~~

# The categories to which the products shown in the home page suggestions belong. Enter a list of the category external IDs.
homeSuggestions.externalId = ["29", "37", "22", "28"]
homeSuggestions.externalId = ${?HOME_SUGGESTIONS_CATEGORIES}

# The amount of products displayed in the home page suggestions.
homeSuggestions.count = 4
homeSuggestions.count = ${?HOME_SUGGESTIONS_SIZE}

# The amount of products displayed for a product's suggestions.
productSuggestions.count = 4
productSuggestions.count = ${?PRODUCT_SUGGESTIONS_SIZE}



# PRODUCT SEARCH
# ~~~~~

# Field in the URL query string containing the searched term.
pop.searchTerm.fieldName = "q"
pop.searchTerm.fieldName = ${?SEARCH_PRODUCTS_FIELD}

pop.pagination = {
  # Field in the URL query string containing the page.
  "fieldName": "page",
  # The amount of pages on each side of the current page that are going to be directly displayed.
  "displayedPages": 2
}
pop.pagination.fieldName = ${?PAGINATION_FIELD}
pop.pagination.displayedPages = ${?PAGINATION_DISPLAYED_PAGES}

pop.productsPerPage = {
  # Field in the URL query string containing the amount of products per page.
  "fieldName": "ppp",
  # Available options to select the amount of products per page. Consist of:
  # - fieldValue: identifier of this option, e.g. used in the URL query string
  # - label: the name to be displayed, it can be either a regular text or a i18n message key
  # - amount: products per page of this option, the allowed range goes from 0 to 500
  # - default: whether this option should be default (only the first one will be taken into account)
  "options": [
    {
      "fieldValue": "24",
      "fieldLabel": "24",
      "amount": 24,
      "default": true
    },
    {
      "fieldValue": "48",
      "fieldLabel": "48",
      "amount": 48
    }
  ]
}
pop.productsPerPage.fieldName = ${?PRODUCTS_PER_PAGE_FIELD}
pop.productsPerPage.options = ${?PRODUCTS_PER_PAGE_OPTIONS}

pop.sortProducts = {
  # Field in the URL query string containing the sorting criteria.
  "fieldName": "sort",
  # Available options to sort products. Consist of:
  # - fieldValue: identifier of this sort option, e.g. used in the URL query string
  # - label: the name to be displayed, it can be either a regular text or a i18n message key
  # - expr: list (for multisort) of sort expressions applied for that option, in CTP format (http://dev.commercetools.com/http-api-projects-products-search.html#search-sorting)
  #     - use {{locale}} inside the expression to replace it for the user's language (e.g. "name.{{locale}}" would be transformed into "name.en" when the user has English selected)
  # - default: whether this option should be default (only the first one will be taken into account)
  "options": [
    {
      "fieldValue": "default",
      "fieldLabel": "-",
      "default": true
    },
    {
      "fieldValue": "new",
      "fieldLabel": "catalog:sortSelector.new",
      "expressions": ["createdAt desc"]
    },
    {
      "fieldValue": "price-asc",
      "fieldLabel": "catalog:sortSelector.priceAsc",
      "expressions": ["price asc", "createdAt desc"]
    },
    {
      "fieldValue": "price-desc",
      "fieldLabel": "catalog:sortSelector.priceDesc",
      "expressions": ["price desc", "createdAt desc"]
    }
  ]
}
pop.sortProducts.fieldName = ${?SORT_PRODUCTS_FIELD}
pop.sortProducts.options = ${?SORT_OPTIONS}

# Available facets for products. Consist of:
# - uiType: UI type of the facet, default available options are:
#     - list: a simple list with facet options
#     - columnsList: a two columns list with facet options
#     - categoryTree: a category tree (use along with the category_tree mapper)
# - key: the field in the URL query string containing this facet criteria
# - label: the name to be displayed, it can be either a regular text or a i18n message key
# - expr: attribute path of the facet expression applied, in CTP format (http://dev.commercetools.com/http-api-projects-products-search.html#search-facet-term-query-parameter)
#     - use {{locale}} inside the expression to replace it for the user's language (e.g. "name.{{locale}}" would be transformed into "name.en" when the user has English selected)
# - count: whether the product count is shown or hidden
# - threshold: minimum amount of facet options required to display the facet, otherwise the facet is hidden
# - limit: maximum amount of facet options displayed
# - multiSelect: whether you can select multiple options from the facet to filter by or just one per request
# - matchingAll: whether the filtered products should match all selected facet options (matches all) or just at least one (matches any)
# - mapper: transforms the facet options somehow, default available types are:
#    - customSorted: it sorts the options according to a given list of values, missing values are appended
#    - alphabeticallySorted: it sorts the options in alphabetical order
#    - categoryTree: it structures the categories into a category tree (use only with categories!)
pop.facets = [
  {
    "fieldName": "productType",
    "fieldLabel": "catalog:filters.productType",
    "type": "categoryTree",
    "uiType": "categoryTree",
    "attributePath": "categories.id",
    "count": true,
  },
  {
    "fieldName": "size",
    "fieldLabel": "catalog:filters.size",
    "type": "term",
    "uiType": "columnsList",
    "attributePath": "variants.attributes.commonSize.label",
    "count": true,
    "threshold": 2,
    "mapper": {
      "type": "customSorted",
      "values": ["one Size","XXS","XS","S","M","L","XL","XXL","XXXL","34","34.5","35","35.5","36","36.5","37","37.5",
        "38","38.5","39","39.5","40","40.5","41","41.5","42","42.5","43","43.5","44","44.5","45","45.5","46","46.5",
        "47","47.5","70","75","80","85","90","95","100","105","110","115","120"]
    }
  },
  {
    "fieldName": "color",
    "fieldLabel": "catalog:filters.color",
    "type": "term",
    "uiType": "columnsList",
    "attributePath": "variants.attributes.color.label.{{locale}}",
    "count": true,
    "threshold": 2,
    "mapper": {
      "type": "alphabeticallySorted"
    }
  },
  {
    "fieldName": "brands",
    "fieldLabel": "catalog:filters.brand",
    "type": "term",
    "uiType": "list",
    "attributePath": "variants.attributes.designer.label",
    "count": true,
    "threshold": 2
  }
]
pop.facets = ${?FACETS}


# CHECKOUT
# ~~~~~

form.titles = [
  "main:form.personTitles.mr",
  "main:form.personTitles.mrs",
  "main:form.personTitles.ms",
  "main:form.personTitles.dr"
]

payment.settings = [
  {
    "name": "sunrise:payment.prepaid",
    "method": "prepaid"
  },
  {
    "name": "sunrise:payment.creditcard",
    "method": "creditcard",
    "paymentInterface": "payone"
  }
]

checkout.customerServiceNumber = "+49 899982996-0"


# LOCALIZATION
# ~~~~~

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE COUNTRIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of countries as ISO country codes (e.g. DE). Default country first.
#application.countries = ["DE", "US", "GB", "AT", "CH"]
application.countries = ${?COUNTRIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE CURRENCIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of currencies as ISO currency codes (e.g. EUR). Default currency first.
#application.currencies = ["EUR", "USD"]
application.currencies = ${?CURRENCIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE LANGUAGES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of languages as language tags (e.g. en-UK). Default language first.
#application.i18n.languages = ["en", "de", "es"]
application.i18n.languages = ${?LANGUAGES}

# List of i18n bundles to load.
application.i18n.bundles = ["sunrise", "main", "banner", "catalog", "checkout", "my-account-login", "my-account"]

# If you want to change the way i18n messages are resolved, you can change the list of resolver loaders you want to use.
# Keep in mind that the list order determines the order in which the resolvers are going to be invoked for each message.
application.i18n.resolverLoaders = [
  {
    "type": "yaml",
    "path": "i18n"
  },
  {
    "type": "yaml",
    "path": "META-INF/resources/webjars/i18n"
  }
]


# TEMPLATE ENGINE
# ~~~~~

# If you want to change the way templates sources are loaded, you can change the list of template loaders you want to use.
# Keep in mind that the list order determines the order in which the loaders are going to be invoked.
handlebars.templateLoaders = [
  {
    "type":"classpath",
    "path":"/templates"
  },
  {
    "type":"classpath",
    "path":"/META-INF/resources/webjars/templates"
  }
]

# CMS
# ~~~~~

# List of CMS bundles to load.
# (only if used file-based CMS)
application.cms.i18n.bundles = ["home"]

# If you want to change the way CMS messages are resolved, you can change the list of resolver loaders you want to use.
# Keep in mind that the list order determines the order in which the resolvers are going to be invoked for each message.
# (only if used file-based CMS)
application.cms.i18n.resolverLoaders = [
  {
    "type": "yaml",
    "path": "cms"
  }
]


# BASIC AUTH
# ~~~~~

# LEAVE COMMENTED IF YOU DO NOT WANT TO ENABLE BASIC ACCESS AUTHENTICATION!
# If you only want authorized users to access your website, please enter here the required credentials
# separated by colon ':'. For example, for a username 'john' and password 'secret', enter 'john:secret'.
#httpAuth.basic.credentials = "username:password"
httpAuth.basic.credentials = ${?BASIC_AUTH_CREDENTIALS}

# Authentication realm that identifies your application. This is only necessary when basic authentication is enabled.
httpAuth.basic.realm = "Sunrise Demo"
httpAuth.basic.realm = ${?BASIC_AUTH_REALM}


# SECRET KEY
# ~~~~~

# MAKE SURE TO CHANGE FOR PRODUCTION!
# The secret key is used to secure cryptographics functions. Anyone that can get access to the application secret will
# be able to generate any session they please, effectively allowing them to log in to your system as any user they please.
# If you deploy your application to several instances be sure to use the same key.
play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}


# INJECTION
# ~~~~~
play.application.loader = "com.commercetools.sunrise.play.inject.SunriseGuiceApplicationLoader"
play.http.errorHandler = "com.commercetools.sunrise.play.http.SunriseDefaultHttpErrorHandler"
play.modules.enabled += "com.commercetools.sunrise.framework.injection.SunriseModule"

play.http.actionComposition.controllerAnnotationsFirst = true

include "dev"