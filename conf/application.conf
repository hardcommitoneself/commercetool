# This is the main configuration file for the application.
# https://github.com/typesafehub/config
# ~~~~~


# PRODUCTS
# ~~~~~

# Product attribute list that is displayed for a specific product variant (this does not allow to select different
# product variants, please check soft/hard selectable attributes for that purpose). Enter a list of the attribute keys.
productData.displayedAttributes = ["colorFreeDefinition", "designer"]
productData.displayedAttributes = ${?DISPLAYED_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that require re-loading the page to display the selected variant,
# e.g. if you select a different color you may want to show different pictures, description, etc.
# Enter a list of the attribute names.
productData.hardSelectableAttributes = ["color"]
productData.hardSelectableAttributes = ${?HARD_SELECTABLE_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that DO NOT require re-loading the page to display the selected variant, e.g. size.
# Enter a list of the attribute names.
productData.softSelectableAttributes = ["size"]
productData.softSelectableAttributes = ${?SOFT_SELECTABLE_ATTRIBUTES}


# CATEGORIES
# ~~~~~

# The sales category in your project. Enter the category external ID.
common.saleCategoryExternalId = "6"
common.saleCategoryExternalId = ${?SALES_CATEGORY}

# The category containing the new products in your project. Enter the category external ID.
common.newCategoryExternalId = "1"
common.newCategoryExternalId = ${?NEW_CATEGORY}


# SUGGESTIONS
# ~~~~~

# The categories to which the products shown in the home page suggestions belong. Enter a list of the category external IDs.
home.suggestions.externalId = ["29", "37", "22", "28"]
home.suggestions.externalId = ${?HOME_SUGGESTIONS_CATEGORIES}

# The amount of products displayed in the home page suggestions.
home.suggestions.count = 4
home.suggestions.count = ${?HOME_SUGGESTIONS_SIZE}

# The amount of products displayed for a product's suggestions.
pdp.productSuggestions.count = 4
pdp.productSuggestions.count = ${?PRODUCT_SUGGESTIONS_SIZE}



# PRODUCT SEARCH
# ~~~~~

# Field in the URL query string containing the searched term.
pop.searchTerm.key = "q"
pop.searchTerm.key = ${?SEARCH_PRODUCTS_FIELD}

# Field in the URL query string containing the page.
pop.pagination.key = "page"
pop.pagination.key = ${?PAGINATION_FIELD}

# The maximum amount of pages to be displayed in the pagination, which the customer can use to navigate directly.
pop.pagination.displayedPages = 6
pop.pagination.displayedPages = ${?PAGINATION_DISPLAYED_PAGES}

# Field in the URL query string containing the amount of products per page.
pop.productsPerPage.key = "display"
pop.productsPerPage.key = ${?PRODUCTS_PER_PAGE_FIELD}

# Available options to select the amount of products per page. The allowed range goes from 0 to 500 products per page.
pop.productsPerPage.options = [24, 48]
pop.productsPerPage.options = ${?PRODUCTS_PER_PAGE_OPTIONS}

pop.productsPerPage.enableAll = false
pop.productsPerPage.enableAll = ${?PRODUCTS_PER_PAGE_ENABLE_ALL}

# The default selected amount of products per page. This value must be present in the display options to work properly.
pop.productsPerPage.default = 24
pop.productsPerPage.default = ${?PRODUCTS_PER_PAGE_DEFAULT}

# Field in the URL query string containing the sorting criteria.
pop.sortProducts.key = "sort"
pop.sortProducts.key = ${?SORT_PRODUCTS_FIELD}

pop.sortProducts.options = [
  {
    "value": "new",
    "label": "catalog:sortSelector.new",
    "expr": ["createdAt desc"]
  },
  {
    "value": "price-asc",
    "label": "catalog:sortSelector.priceAsc",
    "expr": ["price asc", "createdAt desc"]
  },
  {
    "value": "price-desc",
    "label": "catalog:sortSelector.priceDesc",
    "expr": ["price desc", "createdAt desc"]
  }
]

pop.sortProducts.default = ["new"]

pop.facets = [
  {
    "type": "SELECT_CATEGORY_HIERARCHICAL_DISPLAY",
    "key": "productType",
    "label": "catalog:filters.productType",
    "expr": "variants.categories.id",
    "count": false,
    "multiSelect": false,
    "mapper": {
      "type": "hierarchicalCategoryFacet"
    }
  },
  {
    "type": "SELECT_TWO_COLUMNS_DISPLAY",
    "key": "size",
    "label": "catalog:filters.size",
    "expr": "variants.attributes.commonSize.label",
    "count": false,
    "mapper": {
      "type": "customSortedFacet",
      "values": ["one Size","XXS","XS","S","M","L","XL","XXL","XXXL","34","34.5","35","35.5","36","36.5","37","37.5",
        "38","38.5","39","39.5","40","40.5","41","41.5","42","42.5","43","43.5","44","44.5","45","45.5","46","46.5",
        "47","47.5","70","75","80","85","90","95","100","105","110","115","120"]
    }
  },
  {
    "type": "SELECT_TWO_COLUMNS_DISPLAY",
    "key": "color",
    "label": "catalog:filters.color",
    "expr": "variants.attributes.color.label.{{locale}}",
    "count": false,
    "mapper": {
      "type": "alphabeticallySortedFacet"
    }
  },
  {
    "type": "SELECT_LIST_DISPLAY",
    "key": "brands",
    "label": "catalog:filters.brand",
    "expr": "variants.attributes.designer.label",
    "count": false
  }
]


# CHECKOUT
# ~~~~~

checkout.allowedTitles = [
  {
    "label": "main:form.personTitles.mr",
    "value": "mr"
  },
  {
    "label": "main:form.personTitles.mrs",
    "value": "mrs"
  },
  {
    "label": "main:form.personTitles.ms",
    "value": "ms"
  },
  {
    "label": "main:form.personTitles.dr",
    "value": "dr"
  }
]

checkout.customerServiceNumber = "+49 899982996-0"


# LOCALIZATION
# ~~~~~

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE COUNTRIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of countries as ISO country codes (e.g. DE). Default country first.
#application.countries = ["DE", "US", "GB", "AT", "CH"]
application.countries = ${?COUNTRIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE CURRENCIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of currencies as ISO currency codes (e.g. EUR). Default currency first.
#application.currencies = ["EUR", "USD"]
application.currencies = ${?CURRENCIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE LANGUAGES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of languages as language tags (e.g. en-UK). Default language first.
#application.i18n.languages = ["en", "de", "es"]
application.i18n.languages = ${?LANGUAGES}

# List of i18n bundles to load.
application.i18n.bundles = ["sunrise", "main", "banner", "catalog", "checkout", "my-account-login"]

# If you want to change the way i18n messages are resolved, you can change the list of resolver loaders you want to use.
# Keep in mind that the list order determines the order in which the resolvers are going to be invoked for each message.
application.i18n.resolverLoaders = [
  {
    "type": "yaml",
    "path": "i18n"
  },
  {
    "type": "yaml",
    "path": "META-INF/resources/webjars/i18n"
  }
]


# TEMPLATE ENGINE
# ~~~~~

# If you want to change the way templates sources are loaded, you can change the list of template loaders you want to use.
# Keep in mind that the list order determines the order in which the loaders are going to be invoked.
handlebars.templateLoaders = [
  {
    "type":"classpath",
    "path":"/templates"
  },
  {
    "type":"classpath",
    "path":"/META-INF/resources/webjars/templates"
  }
]


# BASIC AUTH
# ~~~~~

# LEAVE COMMENTED IF YOU DO NOT WANT TO ENABLE BASIC ACCESS AUTHENTICATION!
# If you only want authorized users to access your website, please enter here the required credentials
# separated by colon ':'. For example, for a username 'john' and password 'secret', enter 'john:secret'.
#application.auth.credentials = "username:password"
application.auth.credentials = ${?BASIC_AUTH_CREDENTIALS}

# Authentication realm that identifies your application. This is only necessary when basic authentication is enabled.
application.auth.realm = "Sunrise Demo"
application.auth.realm = ${?BASIC_AUTH_REALM}


# APPLICATION
# ~~~~~

# Enables metrics for each request with the amount of queries, commands and bytes fetched, as well as the duration.
application.metrics.enabled = true

# Enables a setup wizard that lets you configure the minimum information to run your project.
application.setup.enabled = true


# SECRET KEY
# ~~~~~

# MAKE SURE TO CHANGE FOR PRODUCTION!
# The secret key is used to secure cryptographics functions. Anyone that can get access to the application secret will
# be able to generate any session they please, effectively allowing them to log in to your system as any user they please.
# If you deploy your application to several instances be sure to use the same key.
play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}


# INJECTION
# ~~~~~
play.http.actionCreator = "basicauth.BasicAuthActionCreator"
play.application.loader = "inject.SunriseApplicationLoader"

play.modules.enabled += "basicauth.BasicAuthProductionModule"
play.modules.enabled += "ctpclient.CtpClientProductionModule"
play.modules.enabled += "inject.CtpModelsProductionModule"
play.modules.enabled += "inject.ApplicationProductionModule"
play.modules.enabled += "categorytree.CategoryTreeProductionModule"
play.modules.enabled += "reverserouter.ReverseRouterProductionModule"

# see https://www.playframework.com/documentation/2.5.x/JavaActionCreator#Action-creators
play.http.actionComposition.executeActionCreatorActionFirst = true

include "dev"
